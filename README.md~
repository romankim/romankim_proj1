App URL : http://romankim-proj1.herokuapp.com/

============ Project 1-2 ============
Main objective of this project was to remove the original graphics library and make the app solely executable based on DOM elements. 

The main design challenges I encountered were
1. Whether to make the Board mutable/immutable
2. What elements I should use to graphically show the Board
3. How I should enable the users to draw on the board.

I addressed these challenges by the following.
1. 
My Design : For performance, I made my Board object mutable. I stored the state of the cells in a 2D array called 'grid_array' and made it accessible from outside. For a N x N size data, I made the grid_array size to be 2N x N, which I allocate the latter half of the array for a buffer. The state of the board is temporarily stored to the buffer during each iteration of the step function.
Alternative Options : I could have made the Board immutable and make my step function return a new Board through every iteration. This would have made my app much slower.

2. 
My Design : I used absolute positioning of miniscule divs inside a large container div to represent my Board graphically. I also made a N x N array named cells[][] as a way to name each divs. For each cell, I gave it a cell.x and cell.y coordinates which corresponds to the coordinates in the Board object.
Alternative Options : I also considered using a table element instead of using NxN number of divs. However, the table element might have own behaviors responding to mouse drags which could interfere with my mouse listners. 

3. 
My Design : Users can select their starting state by drawing on the Board with their mouse. I did this by creating a mousedown handler, mouseenter handler, and mouseup handler. Each cell listens to a mousedown and mouseenter event, and the window listens to a mouseup event. When the user presses a mouse click and drags over the board, the mousedown and mouseenter handler will populate the corresponding cells. When mouseup handler is called, the dragging is assumed to be terminated, and mouseenter will not do anything until the next mousedown event. 
Alternative Options : I could have had the entire window listen to the mouse drag, fetch e.pageX and e.pageY, and transform that graphical coordinates to the Board coordinates to update values in the Board coordinates. However, I assumed that there would be a lot of exception cases to handle if I was getting the mouse pointer coordinates depending on different resolutions. 




============ Project 1-1 ============
Design challenges:

Main objective of this project was to 1. implement the game of life and the rules that govern each cells and 2. create multiple states that run independently from each other.

My main focus was on seperating the graphics library and the implementation of the data structure. I resolved this by having separate object for the 'board' object, which represents the data structure of the cell, and the 'pad' object, which represents the graphics that gets painted on the screen. The two objects were designed so that they do not necessarily know about each other.

I could use various data types for the representation of the board. In this design, I used a two dimensional array. For a N by N grid, I constructed a 2N x N grid, which the latter half was allocated for a 'buffer' to store temporary values for the next state before it actually becomes painted on the screen.
